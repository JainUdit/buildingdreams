{"version":3,"sources":["images/Background.jpg","containers/Style.ts","containers/Footer.tsx","containers/Header.tsx","containers/Daytona.tsx","containers/HelloWorld.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledDaytona","styled","Grid","StyledHeader","background","StyledFooter","Footer","container","item","wrap","justify","alignItems","className","Header","Daytona","direction","HelloWorld","children","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,wC,49BCIpC,IAAMC,EAAgBC,YAAOC,IAAPD,CAAH,KAKbE,EAAeF,YAAO,MAAPA,CAAH,IACGG,KAgBfC,EAAeJ,YAAOC,IAAPD,CAAH,KCvBZK,EAAS,WAClB,OACI,kBAACD,EAAD,CAAcE,WAAS,EAACC,MAAI,EAACC,KAAK,SAASC,QAAQ,SAASC,WAAW,UACnE,4CACA,0BAAMC,UAAU,eAAhB,kBCHCC,EAAS,WAClB,OACI,kBAACV,EAAD,KACI,kBAACD,EAAA,EAAD,CAAMK,WAAS,EAACC,MAAI,EAACI,UAAU,UAAUH,KAAK,SAASC,QAAQ,aAAaC,WAAW,UACnF,2CAEJ,kBAACT,EAAA,EAAD,CAAMK,WAAS,EAACC,MAAI,EAACI,UAAU,UAAUH,KAAK,SAASC,QAAQ,SAASC,WAAW,UAC/E,mDCGDG,EATC,WACZ,OACI,kBAACd,EAAD,CAAeO,WAAS,EAACC,MAAI,EAACO,UAAU,SAASJ,WAAW,SAASD,QAAQ,iBACzE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDGM,EANI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACI,6BAAMA,ICeCC,EAZH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,kBAAkBC,UAAWN,QCA/BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.769f9095.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Background.34919896.jpg\";","import styled from '@emotion/styled';\r\nimport { Grid } from '@material-ui/core';\r\nimport background from '../images/Background.jpg';\r\n\r\nexport const StyledDaytona = styled(Grid)`\r\n    height: 100%;\r\n    width: 100%;\r\n`\r\n\r\nexport const StyledHeader = styled('div')`\r\n    background-image: url(${background}); \r\n    width: 100%;\r\n    height: 400px;\r\n    font-size: 16px;\r\n    font-family: \"Lucida Console\", Monaco, monospace;\r\n\r\n    .topFace {\r\n        height: 50px;\r\n        margin: 10px;\r\n    }\r\n\r\n    .midFace {\r\n        height: 300px;\r\n    }\r\n`\r\n\r\nexport const StyledFooter = styled(Grid)`\r\n    background-color: #F5F5F5;\r\n    color: #333333;\r\n    height: 50px;\r\n    font-family: Georgia, serif;\r\n    font-size: 14px;\r\n\r\n    .companyName {\r\n        font-family: \"Lucida Console\", Monaco, monospace;\r\n        font-weight: 500;\r\n        padding-left: 10px;\r\n    }\r\n`","import React from 'react';\r\nimport { StyledFooter } from './Style';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <StyledFooter container item wrap=\"nowrap\" justify=\"center\" alignItems=\"center\">\r\n            <span>Powered By</span>\r\n            <span className=\"companyName\">Thakarji.com</span>\r\n        </StyledFooter>\r\n    );\r\n}","import React, { ReactElement } from 'react';\r\nimport { StyledHeader } from './Style';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport const Header = (): ReactElement => {\r\n    return (\r\n        <StyledHeader>\r\n            <Grid container item className=\"topFace\" wrap=\"nowrap\" justify=\"flex-start\" alignItems=\"center\">\r\n                <span>Thakarji</span>\r\n            </Grid>\r\n            <Grid container item className=\"midFace\" wrap=\"nowrap\" justify=\"center\" alignItems=\"center\">\r\n                <span>U can do it!!!</span>\r\n            </Grid>\r\n        </StyledHeader>\r\n    )\r\n}","import React from 'react';\r\nimport { Footer } from './Footer';\r\nimport { StyledDaytona } from './Style';\r\nimport { Header } from './Header';\r\n\r\nconst Daytona = () => {\r\n    return (\r\n        <StyledDaytona container item direction=\"column\" alignItems=\"center\" justify=\"space-between\">\r\n            <Header />\r\n            <Footer />\r\n        </StyledDaytona>\r\n    )\r\n}\r\n\r\nexport default Daytona;\r\n","import React from 'react';\r\n\r\nconst HelloWorld = ({ children }) => {\r\n    return (\r\n        <div>{children}</div>\r\n    )\r\n}\r\n\r\nexport default HelloWorld;","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport Daytona from './Daytona';\nimport HelloWorld from './HelloWorld';\n\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <HelloWorld>\n        <Switch>\n          <Route path=\"/buildingdreams\" component={Daytona} />\n        </Switch>\n      </HelloWorld>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}